@charset "UTF-8";
@use "sass:math";
@use "sass:map";
@use "sass:meta";
@use "variables" as *;

// Round（四捨五入）
@function round_decimal($number, $digits: 4) {
  @return to_fixed($number, $digits, "round");
}

// Ceil（切り上げ）
@function ceil_decimal($number, $digits: 4) {
  @return to_fixed($number, $digits, "ceil");
}

// Floor（切り下げ）
@function floor_decimal($number, $digits: 4) {
  @return to_fixed($number, $digits, "floor");
}

@function to_fixed($number, $digits: 2, $round: "round") {
  $n: 1;

  // 数値であることを確認
  @if meta.type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  // $digitsが単位なし数値であることを確認
  @if meta.type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not math.is-unitless($digits) {
    // 修正: `math.is-unitless` を使用
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  // $digitsに応じて$nを計算
  @for $i from 1 through $digits {
    $n: $n * 10;
  }

  // $roundの値に応じて処理
  @if $round == "round" {
    @return math.div(math.round($number * $n), $n);
  } @else if $round == "ceil" {
    @return math.div(math.ceil($number * $n), $n);
  } @else if $round == "floor" {
    @return math.div(math.floor($number * $n), $n);
  } @else {
    @warn '#{ $round } is undefined keyword.';
    @return $number;
  }
}

// breakpoints
$breakpoints: (
  "ss": "screen and (min-width: 359px)",
  "s": "screen and (min-width: 376px)",
  "sm": "screen and (min-width: 414px)",
  "sl": "screen and (min-width: 600px)",
  "m": "screen and (min-width: 768px)",
  "ls": "screen and (min-width: 1024px)",
  "l": "screen and (min-width: 1025px)",
  "ll": "screen and (min-width: 1240px)",
  "x": "screen and (min-width: 1367px)",
  "xl": "screen and (min-width: 1440px)",
  "full": "screen and (min-width: 1920px)",
) !default;

@mixin mq($breakpoint: m) {
  @media #{map.get($breakpoints, $breakpoint)} {
    @content;
  }
}

// ダークモード
@mixin dark() {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

// フォントサイズをremに変換
@mixin fs($size: 16, $default: 16) {
  $rem: math.div($size, $default);
  $remsize: floor_decimal($rem);
  font-size: #{$size}px;
  font-size: #{$remsize}rem;
}

// letter-spacing
@mixin ls($size) {
  letter-spacing: math.div($size, 1000) + em;
}

// line-height
@mixin lh($fsize, $lheight) {
  line-height: math.div($lheight, $fsize);
}

// vw系のmixin
@mixin vwfs($size: 16, $windowWidth: $spWidth) {
  $vw: math.div($size, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  font-size: #{$size}px;
  font-size: #{$vwsize}vw;
}

@mixin vww($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  width: #{$width}px;
  width: #{$vwsize}vw;
}

@mixin vwh($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  height: #{$width}px;
  height: #{$vwsize}vw;
}

// margin
@mixin vwm($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin: #{$width}px;
  margin: #{$vwsize}vw;
}

@mixin vwmt($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-top: #{$width}px;
  margin-top: #{$vwsize}vw;
}

@mixin vwmb($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-bottom: #{$width}px;
  margin-bottom: #{$vwsize}vw;
}

@mixin vwml($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-left: #{$width}px;
  margin-left: #{$vwsize}vw;
}

@mixin vwmr($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-right: #{$width}px;
  margin-right: #{$vwsize}vw;
}

@mixin vwmtb($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-top: #{$width}px;
  margin-top: #{$vwsize}vw;
  margin-bottom: #{$width}px;
  margin-bottom: #{$vwsize}vw;
}

@mixin vwmlr($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  margin-left: #{$width}px;
  margin-left: #{$vwsize}vw;
  margin-right: #{$width}px;
  margin-right: #{$vwsize}vw;
}

// padding
@mixin vwp($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding: #{$width}px;
  padding: #{$vwsize}vw;
}

@mixin vwpt($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-top: #{$width}px;
  padding-top: #{$vwsize}vw;
}

@mixin vwpb($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-bottom: #{$width}px;
  padding-bottom: #{$vwsize}vw;
}

@mixin vwpl($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-left: #{$width}px;
  padding-left: #{$vwsize}vw;
}

@mixin vwpr($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-right: #{$width}px;
  padding-right: #{$vwsize}vw;
}

@mixin vwptb($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-top: #{$width}px;
  padding-top: #{$vwsize}vw;
  padding-bottom: #{$width}px;
  padding-bottom: #{$vwsize}vw;
}

@mixin vwplr($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  padding-left: #{$width}px;
  padding-left: #{$vwsize}vw;
  padding-right: #{$width}px;
  padding-right: #{$vwsize}vw;
}

// position
@mixin vwt($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  top: #{$width}px;
  top: #{$vwsize}vw;
}

@mixin vwb($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  bottom: #{$width}px;
  bottom: #{$vwsize}vw;
}

@mixin vwl($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  left: #{$width}px;
  left: #{$vwsize}vw;
}

@mixin vwr($width, $windowWidth: $spWidth) {
  $vw: math.div($width, $windowWidth) * 100;
  $vwsize: ceil_decimal($vw);
  right: #{$width}px;
  right: #{$vwsize}vw;
}

@mixin clipWrap() {
  clip-path: inset(0 0 0 0);
  position: relative;
}

@mixin clipBg() {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

@mixin triangle($size: 10px, $direction: up, $color: inherit) {
  background: $color;

  @if ($direction == up) {
    clip-path: polygon(50% 0, 100% 100%, 0 100%);
    width: $size;
    height: calc(tan(60deg) * $size / 2);
  } @else if ($direction == down) {
    clip-path: polygon(0% 0%, 100% 0%, 50% 100%);
    width: $size;
    height: calc(tan(60deg) * $size / 2);
  } @else if ($direction == left) {
    clip-path: polygon(0 50%, 100% 0, 100% 100%);
    height: $size;
    width: calc(tan(60deg) * $size / 2);
  } @else if ($direction == right) {
    clip-path: polygon(0 0, 100% 50%, 0 100%);
    height: $size;
    width: calc(tan(60deg) * $size / 2);
  }
}
